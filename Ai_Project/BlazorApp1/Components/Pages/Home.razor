@page "/"

<PageTitle>AiChat</PageTitle>


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Local AI Chat Interface</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 20px;
            background-color: #f5f5f5;
            display: flex;
            flex-direction: column;
            height: 100vh;
        }
        
        h1 {
            color: #333;
            text-align: center;
            margin-bottom: 20px;
        }
        
        .main-container {
            display: flex;
            flex-grow: 1;
            gap: 20px;
        }
        
        .chat-section {
            flex: 1;
            display: flex;
            flex-direction: column;
        }
        
        .code-preview-section {
            flex: 1;
            display: flex;
            flex-direction: column;
            background-color: white;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            padding: 20px;
        }
        
        .code-preview-header {
            margin-bottom: 10px;
            padding-bottom: 10px;
            border-bottom: 1px solid #ddd;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .code-preview-content {
            flex-grow: 1;
            overflow-y: auto;
            background-color: #282c34;
            border-radius: 5px;
            padding: 15px;
            color: #abb2bf;
            font-family: 'Courier New', monospace;
            white-space: pre-wrap;
        }
        
        .chat-container {
            background-color: white;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            padding: 20px;
            margin-bottom: 20px;
            flex-grow: 1;
            display: flex;
            flex-direction: column;
        }
        
        .messages {
            flex-grow: 1;
            overflow-y: auto;
            margin-bottom: 20px;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            background-color: #f9f9f9;
        }
        
        .message {
            padding: 10px;
            margin-bottom: 10px;
            border-radius: 5px;
            max-width: 80%;
        }
        
        .user-message {
            background-color: #e3f2fd;
            margin-left: auto;
            text-align: right;
        }
        
        .ai-message {
            background-color: #f1f1f1;
        }
        
        .code-block {
            background-color: #282c34;
            color: #abb2bf;
            padding: 10px;
            border-radius: 5px;
            overflow-x: auto;
            font-family: 'Courier New', monospace;
            position: relative;
        }
        
        .view-in-preview-btn {
            background-color: #4285f4;
            color: white;
            border: none;
            border-radius: 3px;
            padding: 3px 8px;
            font-size: 12px;
            cursor: pointer;
            position: absolute;
            top: 5px;
            right: 5px;
        }
        
        .input-area {
            display: flex;
            gap: 10px;
        }
        
        #user-input {
            flex-grow: 1;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-size: 16px;
        }
        
        button {
            padding: 10px 20px;
            background-color: #4285f4;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
        }
        
        button:hover {
            background-color: #3367d6;
        }
        
        .copy-btn {
            padding: 5px 10px;
            background-color: #555;
            color: white;
            border: none;
            border-radius: 3px;
            cursor: pointer;
            font-size: 14px;
        }
        
        .copy-btn:hover {
            background-color: #777;
        }
        
        .language-selector {
            margin-bottom: 20px;
            text-align: center;
        }
        
        select {
            padding: 8px;
            border-radius: 5px;
            border: 1px solid #ddd;
        }
        
        .api-key-container {
            margin-bottom: 20px;
            display: flex;
            gap: 10px;
            align-items: center;
        }
        
        #api-key {
            flex-grow: 1;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
        }
        
        .status {
            margin-top: 20px;
            color: #666;
            font-style: italic;
            text-align: center;
        }
    </style>
</head>
<body>
    <h1>AI Chat Interface</h1>
    
    <div class="api-key-container">
        <label for="api-key">OpenAI API Key:</label>
        <input type="password" id="api-key" placeholder="Enter your OpenAI API key">
        <button id="save-key">Save Key</button>
    </div>
    
    <div class="language-selector">
        <label for="model-select">AI Model:</label>
        <select id="model-select">
            <option value="gpt-3.5-turbo">GPT-3.5 Turbo</option>
            <option value="gpt-4">GPT-4</option>
        </select>
    </div>
    
    <div class="main-container">
        <div class="chat-section">
            <div class="chat-container">
                <div class="messages" id="messages">
                    <div class="message ai-message">
                        Hello! I'm your AI assistant. Type a message in any language, and I'll respond.
                    </div>
                </div>
                
                <div class="input-area">
                    <input type="text" id="user-input" placeholder="Type your message here..." autofocus>
                    <button id="send-button">Send</button>
                </div>
            </div>
        </div>
        
        <div class="code-preview-section" id="code-preview-section">
            <div class="code-preview-header">
                <h3>Code Preview</h3>
                <button class="copy-btn" id="copy-code-btn">Copy Code</button>
            </div>
            <div class="code-preview-content" id="code-preview-content">
                No code to display yet. When code is detected in a response, it will appear here.
            </div>
        </div>
    </div>
    
    <div class="status" id="status">
        Ready. Enter your OpenAI API key to begin.
    </div>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const messagesContainer = document.getElementById('messages');
            const userInput = document.getElementById('user-input');
            const sendButton = document.getElementById('send-button');
            const apiKeyInput = document.getElementById('api-key');
            const saveKeyButton = document.getElementById('save-key');
            const statusElement = document.getElementById('status');
            const modelSelect = document.getElementById('model-select');
            const codePreviewContent = document.getElementById('code-preview-content');
            const copyCodeBtn = document.getElementById('copy-code-btn');
            
            let apiKey = localStorage.getItem('openai-api-key') || '';
            let currentCodeBlock = '';
            
            if (apiKey) {
                apiKeyInput.value = '********';
                statusElement.textContent = 'API Key loaded from storage. Ready to chat!';
            }
            
            saveKeyButton.addEventListener('click', function() {
                const newKey = apiKeyInput.value;
                if (newKey) {
                    localStorage.setItem('openai-api-key', newKey);
                    apiKey = newKey;
                    apiKeyInput.value = '********';
                    statusElement.textContent = 'API Key saved successfully!';
                    setTimeout(function() {
                        statusElement.textContent = 'Ready to chat!';
                    }, 2000);
                } else {
                    statusElement.textContent = 'Please enter a valid API key';
                }
            });
            
            function addMessage(text, isUser = false) {
                const messageDiv = document.createElement('div');
                messageDiv.classList.add('message');
                messageDiv.classList.add(isUser ? 'user-message' : 'ai-message');
                
                // Check for code blocks in AI responses
                if (!isUser) {
                    const codeBlockRegex = /```([\s\S]*?)```/g;
                    let match;
                    let lastIndex = 0;
                    let hasCodeBlock = false;
                    
                    while ((match = codeBlockRegex.exec(text)) !== null) {
                        hasCodeBlock = true;
                        
                        // Add text before code block
                        if (match.index > lastIndex) {
                            const textBeforeCode = document.createTextNode(text.substring(lastIndex, match.index));
                            messageDiv.appendChild(textBeforeCode);
                        }
                        
                        // Add code block
                        const codeBlockDiv = document.createElement('div');
                        codeBlockDiv.classList.add('code-block');
                        
                        // Extract code content (remove the first line which might contain language indicator)
                        let codeContent = match[1].trim();
                        // Remove language identifier if present
                        if (codeContent.indexOf('\n') !== -1) {
                            const firstLineEnd = codeContent.indexOf('\n');
                            const firstLine = codeContent.substring(0, firstLineEnd);
                            if (firstLine.match(/^[a-zA-Z0-9]+$/)) {
                                codeContent = codeContent.substring(firstLineEnd + 1);
                            }
                        }
                        
                        codeBlockDiv.textContent = codeContent;
                        
                        // Add button to view in preview
                        const viewBtn = document.createElement('button');
                        viewBtn.classList.add('view-in-preview-btn');
                        viewBtn.textContent = 'Preview';
                        viewBtn.addEventListener('click', function() {
                            showInPreview(codeContent);
                        });
                        codeBlockDiv.appendChild(viewBtn);
                        
                        messageDiv.appendChild(codeBlockDiv);
                        
                        // Show first code block in preview automatically
                        if (lastIndex === 0) {
                            showInPreview(codeContent);
                        }
                        
                        lastIndex = match.index + match[0].length;
                    }
                    
                    // Add remaining text after last code block
                    if (lastIndex < text.length) {
                        const textAfterCode = document.createTextNode(text.substring(lastIndex));
                        messageDiv.appendChild(textAfterCode);
                    }
                    
                    // If no code blocks found, add the text as is
                    if (!hasCodeBlock) {
                        messageDiv.textContent = text;
                    }
                } else {
                    // User messages are shown as is
                    messageDiv.textContent = text;
                }
                
                messagesContainer.appendChild(messageDiv);
                messagesContainer.scrollTop = messagesContainer.scrollHeight;
            }
            
            function showInPreview(code) {
                codePreviewContent.textContent = code;
                currentCodeBlock = code;
            }
            
            copyCodeBtn.addEventListener('click', function() {
                if (currentCodeBlock) {
                    navigator.clipboard.writeText(currentCodeBlock).then(function() {
                        copyCodeBtn.textContent = 'Copied!';
                        setTimeout(function() {
                            copyCodeBtn.textContent = 'Copy Code';
                        }, 2000);
                    });
                }
            });
            
            async function callOpenAI(userMessage) {
                if (!apiKey) {
                    statusElement.textContent = 'Please enter your OpenAI API key first';
                    return 'Please enter your OpenAI API key to continue.';
                }
                
                try {
                    statusElement.textContent = 'Thinking...';
                    
                    const response = await fetch('https://api.openai.com/v1/chat/completions', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${apiKey}`
                        },
                        body: JSON.stringify({
                            model: modelSelect.value,
                            messages: [
                                {
                                    role: 'system',
                                    content: 'You are a helpful assistant that can respond in any language the user communicates in. When sharing code examples, always use proper markdown code blocks with triple backticks.'
                                },
                                {
                                    role: 'user',
                                    content: userMessage
                                }
                            ],
                            temperature: 0.7
                        })
                    });
                    
                    const data = await response.json();
                    
                    if (data.error) {
                        statusElement.textContent = `Error: ${data.error.message}`;
                        return `Error: ${data.error.message}`;
                    }
                    
                    statusElement.textContent = 'Ready to chat!';
                    return data.choices[0].message.content;
                } catch (error) {
                    statusElement.textContent = `Error: ${error.message}`;
                    return `Sorry, there was an error: ${error.message}`;
                }
            }
            
            async function handleSendMessage() {
                const message = userInput.value.trim();
                if (message) {
                    addMessage(message, true);
                    userInput.value = '';
                    userInput.focus();
                    
                    // Get AI response
                    const aiResponse = await callOpenAI(message);
                    addMessage(aiResponse);
                }
            }
            
            // Make sure these event listeners are properly attached
            if (sendButton) {
                sendButton.addEventListener('click', handleSendMessage);
                console.log('Send button event listener attached');
            }
            
            if (userInput) {
                userInput.addEventListener('keypress', function(e) {
                    if (e.key === 'Enter') {
                        handleSendMessage();
                    }
                });
                console.log('User input event listener attached');
            }
        });
    </script>
</body>
</html>

