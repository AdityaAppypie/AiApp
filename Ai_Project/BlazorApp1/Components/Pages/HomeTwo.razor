@page "/hometwo"
@rendermode InteractiveServer

<PageTitle>HomeTwo</PageTitle>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Chat with Code Preview</title>
    <style>
        :root {
            --primary-color: #4285f4;
            --primary-dark: #3367d6;
            --background-color: #f5f5f5;
            --card-color: #ffffff;
            --text-color: #333333;
            --border-color: #dddddd;
            --chat-user-bg: #e3f2fd;
            --chat-ai-bg: #f1f1f1;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 0;
            background-color: var(--background-color);
            color: var(--text-color);
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            display: flex;
            flex-direction: column;
            min-height: 100vh;
        }

        header {
            text-align: center;
            margin-bottom: 30px;
        }

        h1 {
            margin: 0 0 10px 0;
            color: var(--primary-color);
        }

        .subtitle {
            font-size: 1.1rem;
            color: #666;
        }

        .main-content {
            display: flex;
            flex: 1;
            gap: 20px;
        }

        .chat-container {
            flex: 1;
            background-color: var(--card-color);
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            padding: 20px;
            display: flex;
            flex-direction: column;
            height: 70vh;
        }

        .preview-container {
            flex: 1;
            background-color: var(--card-color);
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            padding: 20px;
            display: flex;
            flex-direction: column;
            height: 70vh;
        }

        .preview-header {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
        }

        .preview-actions button {
            padding: 5px 10px;
            background-color: var(--primary-color);
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 0.9rem;
            margin-left: 5px;
        }

        .preview-display {
            flex: 1;
            border: 1px solid var(--border-color);
            border-radius: 5px;
            overflow: hidden;
            display: flex;
            flex-direction: column;
        }

        .preview-tabs {
            display: flex;
            background-color: #f1f1f1;
            border-bottom: 1px solid var(--border-color);
        }

        .preview-tab {
            padding: 8px 16px;
            cursor: pointer;
            border-right: 1px solid var(--border-color);
        }

        .preview-tab.active {
            background-color: white;
            border-bottom: 2px solid var(--primary-color);
        }

        .preview-content {
            flex: 1;
            display: flex;
        }

        .preview-code {
            flex: 1;
            padding: 10px;
            font-family: 'Consolas', 'Monaco', monospace;
            font-size: 14px;
            white-space: pre-wrap;
            overflow: auto;
            tab-size: 4;
            background-color: #f8f8f8;
            display: none;
        }

        .preview-render {
            flex: 1;
            border: none;
            background-color: white;
            display: none;
        }

        .preview-code.active, .preview-render.active {
            display: block;
        }

        .messages {
            flex: 1;
            overflow-y: auto;
            margin-bottom: 20px;
            padding: 10px;
            border: 1px solid var(--border-color);
            border-radius: 5px;
            background-color: #f9f9f9;
        }

        .message {
            padding: 10px;
            margin-bottom: 10px;
            border-radius: 5px;
            max-width: 80%;
            position: relative;
        }

        .user-message {
            background-color: var(--chat-user-bg);
            margin-left: auto;
            text-align: right;
        }

        .ai-message {
            background-color: var(--chat-ai-bg);
        }

        .message pre {
            background-color: #2d2d2d;
            color: #f8f8f2;
            padding: 10px;
            border-radius: 5px;
            overflow-x: auto;
            font-family: 'Consolas', 'Monaco', monospace;
            text-align: left;
        }

        .message code {
            background-color: rgba(0, 0, 0, 0.1);
            padding: 2px 4px;
            border-radius: 3px;
            font-family: 'Consolas', 'Monaco', monospace;
        }

        .preview-button {
            position: absolute;
            right: 10px;
            top: 10px;
            background-color: var(--primary-color);
            color: white;
            border: none;
            border-radius: 3px;
            padding: 3px 8px;
            font-size: 0.8rem;
            cursor: pointer;
            display: none;
        }

        .ai-message:hover .preview-button {
            display: block;
        }

        .input-area {
            display: flex;
            gap: 10px;
        }

        #user-input {
            flex-grow: 1;
            padding: 12px;
            border: 1px solid var(--border-color);
            border-radius: 5px;
            font-size: 16px;
            resize: none;
        }

        button {
            padding: 10px 20px;
            background-color: var(--primary-color);
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.2s;
        }

        button:hover {
            background-color: var(--primary-dark);
        }

        .settings-panel {
            background-color: var(--card-color);
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            padding: 20px;
            margin-bottom: 20px;
        }

        .settings-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
        }

        .setting-item {
            display: flex;
            flex-direction: column;
        }

        .setting-item label {
            margin-bottom: 5px;
            font-weight: bold;
        }

        .setting-item input, .setting-item select {
            padding: 10px;
            border: 1px solid var(--border-color);
            border-radius: 5px;
            font-size: 16px;
        }

        .status {
            margin-top: 20px;
            color: #666;
            font-style: italic;
            text-align: center;
        }

        @* @media (max-width: 768px) {
            .main-content {
                flex-direction: column;
            }
            
            .chat-container, .preview-container {
                height: auto;
                min-height: 400px;
            }
        } *@
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>AI Chat with Code Preview</h1>
            <p class="subtitle">Chat with AI and instantly preview any generated code</p>
        </header>

        <div class="settings-panel">
            <div class="settings-grid">
                <div class="setting-item">
                    <label for="api-key">OpenAI API Key:</label>
                    <input type="password" id="api-key" placeholder="Enter your OpenAI API key">
                </div>
                <div class="setting-item">
                    <label for="model-select">AI Model:</label>
                    <select id="model-select">
                        <option value="gpt-3.5-turbo">GPT-3.5 Turbo</option>
                        <option value="gpt-4">GPT-4</option>
                    </select>
                </div>
                <div class="setting-item">
                    <label for="system-prompt">System Prompt:</label>
                    <input type="text" id="system-prompt" value="You are a helpful assistant skilled in web development. When providing code examples, make them detailed and complete.">
                </div>
                <div class="setting-item">
                    <button id="save-settings">Save Settings</button>
                </div>
            </div>
        </div>

        <div class="main-content">
            <div class="chat-container">
                <div class="messages" id="messages">
                    <div class="message ai-message">
                        Hello! I'm your AI assistant. I can help with code and answer questions. When I provide code, you can preview it directly.
                    </div>
                </div>
                
                <div class="input-area">
                    <textarea id="user-input" placeholder="Type your message here..." rows="3"></textarea>
                    <button id="send-button">Send</button>
                </div>
            </div>

            <div class="preview-container">
                <div class="preview-header">
                    <h3>Code Preview</h3>
                    <div class="preview-actions">
                        <button id="copy-code">Copy Code</button>
                        <button id="download-code">Download</button>
                    </div>
                </div>
                <div class="preview-display">
                    <div class="preview-tabs">
                        <div class="preview-tab active" data-target="preview-code">Code</div>
                        <div class="preview-tab" data-target="preview-render">Preview</div>
                    </div>
                    <div class="preview-content">
                        <div id="preview-code" class="preview-code active">No code to preview yet. Ask the AI to generate some HTML, CSS, or JavaScript!</div>
                        <iframe id="preview-render" class="preview-render"></iframe>
                    </div>
                </div>
            </div>
        </div>

        <div class="status" id="status">
            Ready. Enter your OpenAI API key to begin.
        </div>
    </div>

    <script>
        // DOM Elements
        const messagesContainer = document.getElementById('messages');
        const userInput = document.getElementById('user-input');
        const sendButton = document.getElementById('send-button');
        const apiKeyInput = document.getElementById('api-key');
        const modelSelect = document.getElementById('model-select');
        const systemPromptInput = document.getElementById('system-prompt');
        const saveSettingsButton = document.getElementById('save-settings');
        const statusElement = document.getElementById('status');
        const previewCodeElement = document.getElementById('preview-code');
        const previewRenderElement = document.getElementById('preview-render');
        const copyCodeButton = document.getElementById('copy-code');
        const downloadCodeButton = document.getElementById('download-code');
        const previewTabs = document.querySelectorAll('.preview-tab');

        // App State
        let apiKey = localStorage.getItem('openai-api-key') || '';
        let model = localStorage.getItem('openai-model') || 'gpt-3.5-turbo';
        let systemPrompt = localStorage.getItem('system-prompt') || 'You are a helpful assistant skilled in web development. When providing code examples, make them detailed and complete.';
        let currentCode = '';
        let currentLanguage = '';
        let chatHistory = [];

        // Initialize from local storage
        if (apiKey) {
            apiKeyInput.value = '********';
            statusElement.textContent = 'API Key loaded from storage. Ready to chat!';
        }
        if (model) {
            modelSelect.value = model;
        }
        if (systemPrompt) {
            systemPromptInput.value = systemPrompt;
        }

        // Save settings to local storage
        saveSettingsButton.addEventListener('click', () => {
            const newKey = apiKeyInput.value;
            if (newKey && newKey !== '********') {
                localStorage.setItem('openai-api-key', newKey);
                apiKey = newKey;
                apiKeyInput.value = '********';
            }
            
            localStorage.setItem('openai-model', modelSelect.value);
            model = modelSelect.value;
            
            localStorage.setItem('system-prompt', systemPromptInput.value);
            systemPrompt = systemPromptInput.value;
            
            statusElement.textContent = 'Settings saved successfully!';
            setTimeout(() => {
                statusElement.textContent = 'Ready to chat!';
            }, 2000);
        });

        // Helper function to detect code blocks in a message
        function extractCodeBlocks(text) {
            const codeBlocks = [];
            const regex = /```([a-zA-Z]*)\n([\s\S]*?)```/g;
            let match;
            
            while ((match = regex.exec(text)) !== null) {
                codeBlocks.push({
                    language: match[1].toLowerCase(),
                    code: match[2]
                });
            }
            
            return codeBlocks;
        }

        // Helper function to format message with syntax highlighting
        function formatMessage(text) {
            // Replace code blocks with highlighted syntax
            let formattedText = text.replace(/```([a-zA-Z]*)\n([\s\S]*?)```/g, (match, language, code) => {
                return `<pre><code class="language-${language}">${code}</code></pre>`;
            });
            
            // Replace inline code
            formattedText = formattedText.replace(/`([^`]+)`/g, '<code>$1</code>');
            
            return formattedText;
        }

        // Add a message to the chat
        function addMessage(text, isUser = false) {
            const messageDiv = document.createElement('div');
            messageDiv.classList.add('message');
            messageDiv.classList.add(isUser ? 'user-message' : 'ai-message');
            
            // Add to chat history
            chatHistory.push({
                role: isUser ? 'user' : 'assistant',
                content: text
            });
            
            // Format the message text
            messageDiv.innerHTML = formatMessage(text);
            
            // If it's an AI message, check for code blocks
            if (!isUser) {
                const codeBlocks = extractCodeBlocks(text);
                if (codeBlocks.length > 0) {
                    // Add a preview button for each code block
                    for (let i = 0; i < codeBlocks.length; i++) {
                        const previewButton = document.createElement('button');
                        previewButton.classList.add('preview-button');
                        previewButton.textContent = `Preview Code ${i + 1}`;
                        previewButton.dataset.codeIndex = i;
                        
                        previewButton.addEventListener('click', () => {
                            setPreviewContent(codeBlocks[i].code, codeBlocks[i].language);
                        });
                        
                        messageDiv.appendChild(previewButton);
                    }
                    
                    // Automatically preview the first code block
                    setPreviewContent(codeBlocks[0].code, codeBlocks[0].language);
                }
            }
            
            messagesContainer.appendChild(messageDiv);
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }

        // Set content for preview
        function setPreviewContent(code, language) {
            currentCode = code;
            currentLanguage = language;
            
            // Update code view
            previewCodeElement.textContent = code;
            
            // Update render view if it's HTML
            if (language === 'html') {
                const iframe = document.getElementById('preview-render');
                const iframeDoc = iframe.contentDocument || iframe.contentWindow.document;
                iframeDoc.open();
                iframeDoc.write(code);
                iframeDoc.close();
                
                // Switch to render tab
                activateTab('preview-render');
            } else {
                // Switch to code tab
                activateTab('preview-code');
            }
        }

        // Tab switching
        function activateTab(targetId) {
            // Hide all content
            document.querySelectorAll('.preview-code, .preview-render').forEach(el => {
                el.classList.remove('active');
            });
            
            // Show target content
            document.getElementById(targetId).classList.add('active');
            
            // Update tab active state
            previewTabs.forEach(tab => {
                if (tab.dataset.target === targetId) {
                    tab.classList.add('active');
                } else {
                    tab.classList.remove('active');
                }
            });
        }

        // Tab click handlers
        previewTabs.forEach(tab => {
            tab.addEventListener('click', () => {
                activateTab(tab.dataset.target);
            });
        });

        // Copy code button
        copyCodeButton.addEventListener('click', () => {
            navigator.clipboard.writeText(currentCode);
            statusElement.textContent = 'Code copied to clipboard!';
            setTimeout(() => {
                statusElement.textContent = 'Ready to chat!';
            }, 2000);
        });

        // Download code button
        downloadCodeButton.addEventListener('click', () => {
            let extension = '.txt';
            if (currentLanguage === 'html') extension = '.html';
            if (currentLanguage === 'css') extension = '.css';
            if (currentLanguage === 'javascript' || currentLanguage === 'js') extension = '.js';
            
            const blob = new Blob([currentCode], {type: 'text/plain'});
            const a = document.createElement('a');
            a.href = URL.createObjectURL(blob);
            a.download = `code-snippet${extension}`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            
            statusElement.textContent = 'Code downloaded!';
            setTimeout(() => {
                statusElement.textContent = 'Ready to chat!';
            }, 2000);
        });

        // Call OpenAI API
        async function callOpenAI(userMessage) {
            if (!apiKey) {
                statusElement.textContent = 'Please enter your OpenAI API key first';
                return 'Please enter your OpenAI API key to continue.';
            }
            
            try {
                statusElement.textContent = 'Thinking...';
                
                // Prepare messages for the API
                const messages = [
                    {
                        role: 'system',
                        content: systemPrompt
                    }
                ];
                
                // Add chat history (limited to last 10 messages to save tokens)
                const recentHistory = chatHistory.slice(-10);
                messages.push(...recentHistory);
                
                // Add the current user message if not already in history
                if (recentHistory.length === 0 || recentHistory[recentHistory.length - 1].role !== 'user' || 
                    recentHistory[recentHistory.length - 1].content !== userMessage) {
                    messages.push({
                        role: 'user',
                        content: userMessage
                    });
                }
                
                const response = await fetch('https://api.openai.com/v1/chat/completions', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${apiKey}`
                    },
                    body: JSON.stringify({
                        model: model,
                        messages: messages,
                        temperature: 0.7
                    })
                });
                
                const data = await response.json();
                
                if (data.error) {
                    statusElement.textContent = `Error: ${data.error.message}`;
                    return `Error: ${data.error.message}`;
                }
                
                statusElement.textContent = 'Ready to chat!';
                return data.choices[0].message.content;
            } catch (error) {
                statusElement.textContent = `Error: ${error.message}`;
                return `Sorry, there was an error: ${error.message}`;
            }
        }

        // Handle sending a message
        async function handleSendMessage() {
            const message = userInput.value.trim();
            if (message) {
                addMessage(message, true);
                userInput.value = '';
                userInput.focus();
                
                // Get AI response
                const aiResponse = await callOpenAI(message);
                addMessage(aiResponse);
            }
        }

        // UI Event Listeners
        sendButton.addEventListener('click', handleSendMessage);
        
        userInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                handleSendMessage();
            }
        });

        // Function for demo example
        async function runDemo() {
            // Wait for a short time to let everything load
            setTimeout(() => {
                // Add initial messages
                addMessage("Can you show me a simple HTML page with a button that changes color when clicked?", true);
                
                // Simulate AI response after a delay
                setTimeout(() => {
                    const exampleResponse = `Here's a simple HTML page with a button that changes color when clicked:

\`\`\`html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Color Changing Button</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            background-color: #f5f5f5;
        }
        
        .color-button {
            padding: 15px 30px;
            font-size: 18px;
            background-color: #4285f4;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }
        
        .color-button:hover {
            opacity: 0.9;
        }
    </style>
</head>
<body>
    <button class="color-button" id="changeColorBtn">Click to Change Color</button>

    <script>
        const button = document.getElementById('changeColorBtn');
        const colors = ['#4285f4', '#ea4335', '#fbbc05', '#34a853', '#8a2be2', '#ff6347'];
        let currentIndex = 0;
        
        button.addEventListener('click', function() {
            // Move to next color (with wrapping)
            currentIndex = (currentIndex + 1) % colors.length;
            
            // Apply the new color
            button.style.backgroundColor = colors[currentIndex];
        });
    </script>
</body>
</html>
